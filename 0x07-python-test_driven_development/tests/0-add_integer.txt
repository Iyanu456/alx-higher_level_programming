===========================
How to use 0-add_integer.py
===========================

This module defines an integer addition function
``add_integer(a, b=98)``

Usage:
======

``add_integer(...)```returns the addtion of its two arguments. For numbers,
that value is equivalent to using ``+`` operator.

::
	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(2, 3)
	5

::
	>>> add_integer(2, -3)
	-1

Note that floats are casted to ints before addition is performed.

::
	>>> add_integer(3.9, 0.2)
	3

::
	>>> add_integer(-3.9, 0.2)
	-3

Floating and non-floating point values can be combined.

::
	>>> add_integer(3.8, 2)
	5

The second argument is optional - by default, it is 98.

::
	>>> add_integer(2)
	100

Non-Numbers
===========

``add_integer()`` expects both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::
	>>> add_integer("Hello", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

::
	>>> add_integer(5, "Hello")
	Traceback (most recent call last):
	TypeError: b must be an integer

::
	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

:: 
	>>> add_integer(2.8, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument (which in this case is 'a')

::
	>>> add_integer("Hello", "world!")
	Traceback (most recent call last):
	TypeError: a must be an integer

